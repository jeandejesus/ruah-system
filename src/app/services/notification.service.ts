// src/app/notification/notification.service.ts
import { Injectable } from '@angular/core';
import { SwPush } from '@angular/service-worker';
import { HttpClient } from '@angular/common/http';
import { Observable } from 'rxjs';

@Injectable({
  providedIn: 'root', // Isso registra o servi√ßo na raiz da aplica√ß√£o, tornando-o dispon√≠vel globalmente.
})
export class NotificationService {
  // ‚ú® Substitua esta chave pela sua Chave P√∫blica VAPID do backend NestJS ‚ú®
  readonly VAPID_PUBLIC_KEY =
    'BMsge5mDL0_eUOtxONeKm5MrT4ZGA2RY2KCt2x-xIzCMtMEWM7thyxclQCGY51z9nRrpoINF_DxKyI7L7pnAW-U';

  // URL do seu backend NestJS para inscrever o usu√°rio
  readonly BACKEND_URL = 'http://localhost:3000/auth/subscribe'; // Ajuste conforme a URL do seu backend

  constructor(private swPush: SwPush, private http: HttpClient) {}

  /**
   * Solicita permiss√£o para notifica√ß√µes e se inscreve para push.
   */
  requestPermissionAndSubscribe(): void {
    // Verifica se o Service Worker est√° habilitado (necess√°rio para Web Push)
    // if (this.swPush.isEnabled) {
    //   this.swPush
    //     .requestSubscription({
    //       serverPublicKey: this.VAPID_PUBLIC_KEY, // Chave p√∫blica VAPID para o servidor de push
    //     })
    //     .then((subscription) => {
    //       // Envia a assinatura (PushSubscription) para o seu backend NestJS
    //       this.addPushSubscriber(subscription).subscribe(
    //         () =>
    //           console.log(
    //             '‚úÖ Assinatura enviada para o servidor NestJS com sucesso!'
    //           ),
    //         (err) =>
    //           console.error(
    //             '‚ùå Falha ao enviar assinatura para o servidor NestJS:',
    //             err
    //           )
    //       );
    //     })
    //     .catch((err) =>
    //       console.error(
    //         'üö´ N√£o foi poss√≠vel se inscrever para notifica√ß√µes push',
    //         err
    //       )
    //     );
    // } else {
    //   console.warn(
    //     '‚ö†Ô∏è O Service Worker n√£o est√° habilitado. O Web Push n√£o funcionar√°.'
    //   );
    // }
  }

  /**
   * Envia a assinatura para o backend.
   * @param subscription A PushSubscription a ser enviada.
   * @returns Um Observable da requisi√ß√£o HTTP.
   */
  private addPushSubscriber(subscription: PushSubscription): Observable<any> {
    return this.http.post(this.BACKEND_URL, subscription);
  }

  /**
   * Opcional: Escuta por mensagens push recebidas quando o PWA est√° em primeiro plano.
   * O Service Worker j√° lida com a exibi√ß√£o da notifica√ß√£o, mas voc√™ pode ter l√≥gica extra aqui.
   */
  listenForPushMessages(): void {
    this.swPush.messages.subscribe((message) => {
      console.log('üì¨ Mensagem Push recebida no foreground:', message);
      // Exemplo: exibir um toast ou badge na UI
    });
  }

  /**
   * Opcional: Escuta por cliques em notifica√ß√µes.
   */
  listenForNotificationClicks(): void {
    this.swPush.notificationClicks.subscribe(({ action, notification }) => {
      console.log('üëÜ Notifica√ß√£o clicada:', action, notification);
      // Exemplo: redirecionar o usu√°rio para uma URL espec√≠fica da notifica√ß√£o
      if (notification.data && notification.data.url) {
        window.open(notification.data.url, '_blank');
      }
    });
  }
}
